<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE >ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出；可以设置成OFF(关闭)或Error(只输出错误信息) -->
<!--monitorInterval：Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔秒数 -->
<Configuration status="WARN" monitorInterval="30">

	<Properties>
		<!-- 缺省配置（用于开发环境），配置日志文件输出目录和动态参数。其他环境需要在VM参数中指定； “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值 -->
		<!-- 全局属性 -->
		<!-- <Property name="LOG_PATH">${sys:user.home}/logs/${APP_NAME}</Property> -->
		<Property name="APP_NAME">jpa</Property>
		<Property name="LOG_PATH">/Users/zshuai/Desktop/log/${APP_NAME}</Property>
		<Property name="PATTERN_FORMAT">[%date{yyyy-MM-dd HH:mm:ss.SSS}][%thread][%level][%class][%line]:%message%n</Property>
	</Properties>

	<!-- 定义所有的appender -->
	<Appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<PatternLayout pattern="${PATTERN_FORMAT}"/>
		</Console>
		<!-- info及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
	    <!--输出到文件 用来定义超过指定大小自动删除旧的创建新的的Appender.-->
		<RollingRandomAccessFile name="infoLog"
			fileName="${LOG_PATH}/info.log"
			filePattern="${LOG_PATH}/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz"
			append="true">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<Filters>
				<!-- onMatch="ACCEPT" 表示匹配该级别及以上 -->
				<!-- onMatch="DENY" 表示不匹配该级别及以上 -->
				<!-- onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上 -->
				<!-- onMismatch="ACCEPT" 表示匹配该级别以下 -->
				<!-- onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的 -->
				<!-- onMismatch="DENY" 表示不匹配该级别以下的 -->
				<ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			<PatternLayout pattern="${PATTERN_FORMAT}"/>
			<Policies>
				<!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour -->
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
				<!-- 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
				<SizeBasedTriggeringPolicy size="10MB" />
				<!-- DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性) -->
			</Policies>
		</RollingRandomAccessFile>


		<!-- warn级别的日志信息 -->
		<RollingRandomAccessFile name="warnLog" fileName="${LOG_PATH}/warn.log" filePattern="${LOG_PATH}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz"
			append="true">
			<Filters>
				<!-- onMatch="ACCEPT" 表示匹配该级别及以上 -->
				<!-- onMatch="DENY" 表示不匹配该级别及以上 -->
				<!-- onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上 -->
				<!-- onMismatch="ACCEPT" 表示匹配该级别以下 -->
				<!-- onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的 -->
				<!-- onMismatch="DENY" 表示不匹配该级别以下的 -->
				<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL" />
				<ThresholdFilter level="warn" onMatch="ACCEPT" 	onMismatch="DENY" />
			</Filters>

			<PatternLayout pattern="${PATTERN_FORMAT}"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
		</RollingRandomAccessFile>


		<!-- error级别的日志信息 -->
		<RollingRandomAccessFile name="errorLog" fileName="${LOG_PATH}/error.log"
			filePattern="${LOG_PATH}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz"
			append="true">
			<Filters>
				<!-- onMatch="ACCEPT" 表示匹配该级别及以上 -->
				<!-- onMatch="DENY" 表示不匹配该级别及以上 -->
				<!-- onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上 -->
				<!-- onMismatch="ACCEPT" 表示匹配该级别以下 -->
				<!-- onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的 -->
				<!-- onMismatch="DENY" 表示不匹配该级别以下的 -->
				<ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY" />
			</Filters>

			<PatternLayout pattern="${PATTERN_FORMAT}"/>

			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
				<SizeBasedTriggeringPolicy size="10MB" />
			</Policies>
		</RollingRandomAccessFile>
	</Appenders>


	<!-- 全局配置，默认所有的Logger都继承此配置 -->

	<!-- 用来配置LoggerConfig，包含一个root logger和若干个普通logger。 additivity指定是否同时输出log到父类的appender，缺省为true。 
		一个Logger可以绑定多个不同的Appender。只有定义了logger并引入的appender，appender才会生效。 -->
	<Loggers>
	<!-- root logger 配置 -->
		<Root level="ALL" >
			<AppenderRef ref="Console" />
			<AppenderRef ref="infoLog" />
			<AppenderRef ref="warnLog" />
			<AppenderRef ref="errorLog" />
		</Root>
		<!-- 第三方的软件日志级别 -->
		<logger name="org.springframework" level="info" additivity="true">
			<AppenderRef ref="warnLog" />
			<AppenderRef ref="errorLog" />
		</logger>

		<logger name="java.sql.PreparedStatement" level="debug" additivity="true">
			<AppenderRef ref="Console" />
		</logger>

		<logger name="codex.terry.filter" level="debug" additivity="true">
			<AppenderRef ref="infoLog" />
			<AppenderRef ref="warnLog" />
			<AppenderRef ref="errorLog" />
		</logger>

		

		<!-- AsyncRoot - 异步记录日志 - 需要LMAXDisruptor的支持 -->
		<!-- <AsyncRootlevel="info" additivity="false"> <AppenderRef ref="Console"/> 
			<AppenderRef ref="infoLog"/> <AppenderRef ref="errorLog"/> </AsyncRoot> -->
	</Loggers>

</Configuration>